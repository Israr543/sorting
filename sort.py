# -*- coding: utf-8 -*-
"""sort.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nMbIFy3yunex86GjtQEvSEpzD6MKVvG8
"""

import time
import matplotlib.pyplot as plt

def bubble_sort(arr):
 n = len(arr)
 for i in range(n):
  for j in range(0, n-i-1):
   if arr[j] > arr[j+1]:
    arr[j], arr[j+1] = arr[j+1], arr[j]

Arr1 = list(range(1, 6))
Arr2 = list(range(1, 11))
Arr3 = list(range(1, 51))
Arr4 = list(range(1, 101))
arrays = [Arr1, Arr2, Arr3, Arr4]
input_sizes = [len(arr) for arr in arrays]

def measure_time(sort_function, arr):
  runs = 5
  total_time = 0
  for _ in range(runs):
   copy_arr = arr.copy()
   start = time.perf_counter()
   sort_function(copy_arr)
   end = time.perf_counter()
   total_time += (end - start)
   return total_time / runs


bubble_times = []
for arr in arrays:
 avg_time = measure_time(bubble_sort, arr)
 bubble_times.append(avg_time)
copy_arr = arr.copy()
bubble_sort(copy_arr)
print(f"Sorted array of size {len(arr)}: {copy_arr}")
print("\nAverage Execution Times:")
for size, time_taken in zip(input_sizes, bubble_times):
  print(f"Input size {size}: {time_taken:.8f} seconds")
# Plotting
  plt.figure(figsize=(8, 5))
  plt.plot(input_sizes, bubble_times, marker='o', color='blue', label="Bubble‚ê£Sort")
  plt.title("Bubble Sort Performance Analysis")
  plt.xlabel("Input Size (N)")
  plt.ylabel("Average Execution Time (seconds)")
  plt.legend()
  plt.grid(True)
  plt.show()

import time
import matplotlib.pyplot as plt

def selection_sort(arr):
 n = len(arr)
 for i in range(n):
  min_idx = i
  for j in range(i+1, n):
   if arr[j] < arr[min_idx]:
    min_idx = j
 arr[i], arr[min_idx] = arr[min_idx], arr[i]

Arr1 = list(range(1, 6))
Arr2 = list(range(1, 11))
Arr3 = list(range(1, 51))
Arr4 = list(range(1, 101))
arrays = [Arr1, Arr2, Arr3, Arr4]
input_sizes = [len(arr) for arr in arrays]

def measure_time(sort_function, arr):
 runs = 5
 total_time = 0
 for _ in range(runs):
  copy_arr = arr.copy()
  start = time.perf_counter()
  sort_function(copy_arr)
  end = time.perf_counter()
  total_time += (end - start)
 return total_time / runs


selection_times = []
for arr in arrays:
 avg_time = measure_time(selection_sort, arr)
 selection_times.append(avg_time)
 copy_arr = arr.copy()
 selection_sort(copy_arr)
 print(f"Sorted array of size {len(arr)}: {copy_arr}")
 print("\nAverage Execution Times for Selection Sort:")
for size, time_taken in zip(input_sizes, selection_times):
 print(f"Input size {size}: {time_taken:.8f} seconds")
# Plotting
plt.figure(figsize=(8, 5))
plt.plot(input_sizes, selection_times, marker='o', color='green',label="Selection Sort")
plt.title("Selection Sort Performance Analysis")
plt.xlabel("Input Size (N)")
plt.ylabel("Average Execution Time (seconds)")
plt.legend()
plt.grid(True)
plt.show()

import time
import matplotlib.pyplot as plt

def insertion_sort(arr):6
for i in range(1, len(arr)):
 key = arr[i]
 j = i - 1
 while j >= 0 and arr[j] > key:
   arr[j + 1] = arr[j]
   j -= 1
   arr[j + 1] = key

Arr1 = list(range(1, 6))
Arr2 = list(range(1, 11))
Arr3 = list(range(1, 51))
Arr4 = list(range(1, 101))
arrays = [Arr1, Arr2, Arr3, Arr4]
input_sizes = [len(arr) for arr in arrays]


def measure_time(sort_function, arr):
 runs = 5
 total_time = 0
 for _ in range(runs):
  copy_arr = arr.copy()
  start = time.perf_counter()
  sort_function(copy_arr)
  end = time.perf_counter()
  total_time += (end - start)
 return total_time / runs

insertion_times = []
for arr in arrays:
 avg_time = measure_time(insertion_sort, arr)
 insertion_times.append(avg_time)

 copy_arr = arr.copy()
 insertion_sort(copy_arr)
print(f"Sorted array of size {len(arr)}: {copy_arr}")
print("\nAverage Execution Times for Insertion Sort:")
for size, time_taken in zip(input_sizes, insertion_times):
 print(f"Input size {size}: {time_taken:.8f} seconds")
 plt.figure(figsize=(8, 5))
 plt.plot(input_sizes, insertion_times, marker='o', color='red',label="Insertion Sort")
 plt.title("Insertion Sort Performance Analysis")
 plt.xlabel("Input Size (N)")
 plt.ylabel("Average Execution Time (seconds)")
 plt.legend()
 plt.grid(True)
 plt.show()

import time
import matplotlib.pyplot as plt

def merge_sort(arr):
    if len(arr) > 1:
        mid = len(arr) // 2
        left_half = arr[:mid]
        right_half = arr[mid:]
        merge_sort(left_half)
        merge_sort(right_half)
        i = j = k = 0
        while i < len(left_half) and j < len(right_half):
            if left_half[i] < right_half[j]:
                arr[k] = left_half[i]
                i += 1
            else:
                arr[k] = right_half[j]
                j += 1
            k += 1
        while i < len(left_half):
            arr[k] = left_half[i]
            i += 1
            k += 1
        while j < len(right_half):
            arr[k] = right_half[j]
            j += 1
            k += 1

Arr1 = list(range(1, 6))
Arr2 = list(range(1, 11))
Arr3 = list(range(1, 51))
Arr4 = list(range(1, 101))
arrays = [Arr1, Arr2, Arr3, Arr4]
10
input_sizes = [len(arr) for arr in arrays]

def measure_time(sort_function, arr):
 runs = 5
 total_time = 0
 for _ in range(runs):
  copy_arr = arr.copy()
  start = time.perf_counter()
  sort_function(copy_arr)
  end = time.perf_counter()
  total_time += (end - start)
 return total_time / runs

merge_times = []
for arr in arrays:
 avg_time = measure_time(merge_sort, arr)
 merge_times.append(avg_time)
 copy_arr = arr.copy()
 merge_sort(copy_arr)
 print(f"Sorted array of size {len(arr)}: {copy_arr}")
 print("\nAverage Execution Times for Merge Sort:")
for size, time_taken in zip(input_sizes, merge_times):
 print(f"Input size {size}: {time_taken:.8f} seconds")

plt.figure(figsize=(8, 5))
plt.plot(input_sizes, merge_times, marker='o', color='blue', label="Merge Sort")
plt.title("Merge Sort Performance Analysis")
plt.xlabel("Input Size (N)")
plt.ylabel("Average Execution Time (seconds)")
plt.legend()
plt.grid(True)
plt.show()